-- @description Random player
-- @author Giacomo Maraboli
-- @version 1.0
-- @about
--   Random player similar to wwise random container

function saveSel()
    
    local sel ={}
    local num = reaper.CountSelectedMediaItems()
    for i=0, num-1 do
        sel[#sel+1] = reaper.GetSelectedMediaItem(0,i)
    end
    return sel
end

function reSel(sel)
    local sel = sel
    for i = 1,#sel do
        reaper.SetMediaItemSelected( sel[i], true )
    end
end
        

function checkItems (itemNumber, regStart, regEnd) 
      for i=0, itemNumber-1 do
          found = false
          nextItem = reaper.GetSelectedMediaItem(0, i)
          if nextItem == nil then break end
          
          nextItemStart =  reaper.GetMediaItemInfo_Value(nextItem, "D_POSITION")
          nextItemEnd = nextItemStart + reaper.GetMediaItemInfo_Value(nextItem, "D_LENGTH")
          if (nextItemStart >= regStart and nextItemStart <= regEnd) or (nextItemEnd >= regStart and nextItemEnd <= regEnd)then
                                     
              if nextItemStart < regStart then
                 regStart = nextItemStart
                 found = true
                 reaper.SetMediaItemSelected( nextItem, 0 )
             
                 return regStart, regEnd, found
            
                        
              elseif nextItemEnd > regEnd then
                 regEnd = nextItemEnd
                 found = true  
                 reaper.SetMediaItemSelected( nextItem, 0 )
              
                 return regStart, regEnd, found
              
              else  
                  found = true  
                  reaper.SetMediaItemSelected( nextItem, 0 )
               
                  return regStart, regEnd, found
              end
              
          end
         
      end    
      
      return regStart, regEnd, found
end

      
                
function getSel()

sel = saveSel()


i=0

lastItem = false

pos ={}                

  while true do
      
      selItemNum = reaper.CountSelectedMediaItems()
      
      found = true
      item = reaper.GetSelectedMediaItem(0, 0)
      if item == nil then break end
      
      regionStart =  reaper.GetMediaItemInfo_Value(item, "D_POSITION")
      regionEnd = regionStart + reaper.GetMediaItemInfo_Value(item, "D_LENGTH")
     
      
      
      while found == true do
          
          regionStart, regionEnd, found = checkItems(selItemNum, regionStart, regionEnd)
         
      end
          
      pos[#pos+1] = regionStart
     -- regionindex=reaper.AddProjectMarker2(0, true, regionStart, regionEnd, "", -1, 1)
      
      reaper.SetMediaItemSelected( item, 0 )
     
  
  end  

reSel(sel)

end


function randomPlay()


rndIdx = math.random(1, #pos) 



reaper.SetEditCurPos(pos[rndIdx], false, false)
reaper.Main_OnCommand(1007,0) --play
end

function stop()

 reaper.Main_OnCommand(1016,0)
end
-- Script generated by Lokasenna's GUI Builder


local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
    reaper.MB("Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.", "Whoops!", 0)
    return
end
loadfile(lib_path .. "Core.lua")()




GUI.req("Classes/Class - Button.lua")()
GUI.req("Classes/Class - Options.lua")()
GUI.req("Classes/Class - Textbox.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then return 0 end



GUI.name = "Random Play"
GUI.x, GUI.y, GUI.w, GUI.h = 0, 0, 320, 120
GUI.anchor, GUI.corner = "screen", "C"


--override of function in core.lua
GUI.Main_Update_State = function()

    -- Update mouse and keyboard state, window dimensions
    if GUI.mouse.x ~= gfx.mouse_x or GUI.mouse.y ~= gfx.mouse_y then

        GUI.mouse.lx, GUI.mouse.ly = GUI.mouse.x, GUI.mouse.y
        GUI.mouse.x, GUI.mouse.y = gfx.mouse_x, gfx.mouse_y

        -- Hook for user code
        if GUI.onmousemove then GUI.onmousemove() end

    else

        GUI.mouse.lx, GUI.mouse.ly = GUI.mouse.x, GUI.mouse.y

    end
    GUI.mouse.wheel = gfx.mouse_wheel
    GUI.mouse.cap = gfx.mouse_cap
    GUI.char = gfx.getchar()
  
  if GUI.char == 13 and GUI.ReturnSubmit then GUI.ReturnSubmit() end   ---ADDED
  

    if GUI.cur_w ~= gfx.w or GUI.cur_h ~= gfx.h then
        GUI.cur_w, GUI.cur_h = gfx.w, gfx.h

        GUI.resized = true

        -- Hook for user code
        if GUI.onresize then GUI.onresize() end

    else
        GUI.resized = false
    end

    --  (Escape key)  (Window closed)    (User function says to close)
    --if GUI.char == 27 or GUI.char == -1 or GUI.quit == true then
    if (GUI.char == 27 and not (  GUI.mouse.cap & 4 == 4
                                or   GUI.mouse.cap & 8 == 8
                                or   GUI.mouse.cap & 16 == 16
                                or  GUI.escape_bypass))
            or GUI.char == -1
            or GUI.quit == true then

        GUI.cleartooltip()
        return 0
    else
        if GUI.char == 27 and GUI.escape_bypass then GUI.escape_bypass = "close" end
        reaper.defer(GUI.Main)
    end

end








GUI.New("Button1", "Button", {
    z = 11,
    x = 120,
    y = 40,
    w = 80,
    h = 40,
    caption = "Play",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = randomPlay
})

GUI.New("Button2", "Button", {
    z = 11,
    x = 20,
    y = 40,
    w = 80,
    h = 40,
    caption = "Get Sel",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = getSel
})

GUI.New("Button3", "Button", {
    z = 11,
    x = 220,
    y = 40,
    w = 80,
    h = 40,
    caption = "Stop",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame",
    func = stop
})


GUI.Init()
GUI.Main()
GUI.Val("Fade", userFade)
GUI.Val("Lenght", userLenght)
GUI.Val("Loop(s)", userNumLoop)
GUI.Val("Color", {userColor})
GUI.Val("Glue", {userGlue})
GUI.Val("Group", {userGroup})

GUI.ReturnSubmit = doIt 
